<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Users_m extends MY_Model
{

    protected $_table_name = 'tbl_user';
    protected $_primary_key = 'id';
    protected $_primary_filter = 'intval';
    protected $_order_by = "tbl_user.create_time desc";

    function __construct()
    {
        parent::__construct();
    }

    public function update_usage_time()
    {
        $loginUserId = $this->session->userdata('loginuserID');
        $userInfo = array('update_time' => date('Y-m-d H:i:s'));
        $this->edit($userInfo, $loginUserId);
    }

    public function get_where_count($arr = array())
    {
        $this->db->where($arr)
            ->from($this->_table_name)
//            ->join('tbl_sites', $this->_table_name . '.site_id = tbl_package.id', 'left')
//            ->where('tbl_sites.status', 1)
            ->order_by($this->_order_by);
        $query = $this->db->get();
        return $query->num_rows();
    }

    public function get_users($type = 'all')
    {
        $this->db->select($this->_table_name . '.*');
        $this->db->select("tbl_activation.code, tbl_activation.status as code_status");
        $this->db->select(" tbl_activation.activate_time, tbl_activation.expire_time");
        $this->db->select("tbl_activation.used_status");
        $this->db->select('tbl_sites.title as site_name');
        switch ($type) {
            case 'all':
                break;
            case 'teacher':
                $this->db->where($this->_table_name . '.user_type', 1);
                break;
            case 'student':
                $this->db->where($this->_table_name . '.user_type', 2);
                break;
        }
        $this->db->from($this->_table_name)
            ->join('tbl_activation', $this->_table_name . '.id = tbl_activation.user_id and tbl_activation.used_status = 1', 'left')
            ->join('tbl_sites', 'tbl_activation.site_id = tbl_sites.id', 'left')
            ->order_by($this->_order_by);
        $this->db->group_by($this->_table_name.'.id');
        $query = $this->db->get();
        return $query->result();
    }

    public function get_paid_users($type = 'all')
    {
        $this->db->select($this->_table_name . '.*');
        $this->db->select("tbl_activation.code, tbl_activation.status as code_status");
        $this->db->select(" tbl_activation.activate_time, tbl_activation.expire_time");
        $this->db->select("tbl_activation.used_status");
        $this->db->select('tbl_sites.title as site_name');
        switch ($type) {
            case 'all':
                break;
            case 'teacher':
                $this->db->where($this->_table_name . '.user_type', 1);
                break;
            case 'student':
                $this->db->where($this->_table_name . '.user_type', 2);
                break;
        }
        $this->db->where('tbl_activation.used_status = 1');
        $this->db->from('tbl_activation')
            ->join($this->_table_name, $this->_table_name . '.id = tbl_activation.user_id', 'left')
            ->join('tbl_sites', 'tbl_activation.site_id = tbl_sites.id', 'left')
            ->order_by($this->_order_by);
        $this->db->order_by('tbl_activation.expire_time asc');
        $query = $this->db->get();
        return $query->result();
    }

    function insert($array)
    {
        return parent::insert($array); // TODO: Change the autogenerated stub
    }

    public function edit($arr, $item_id)
    {
        $this->db->where($this->_primary_key, $item_id);
        $this->db->update($this->_table_name, $arr);
        return $item_id;
    }

    public function publish($item_id, $publish_st)//$stop_st==1 then enabled state, $stop_st == 0 then Disabled
    {
        $this->db->set('user_status', $publish_st);
        $this->db->where('id', $item_id);
        $this->db->update('tbl_user');
        return;
    }

    public function add($param)
    {
        $arr = array(
            'user_account' => $param['user_account'],
            'user_name' => $param['user_name'],
            'password' => $this->hash($param['password']),
            'gender' => $param['gender'],
            'user_school' => $param['user_school'],
            'user_type' => $param['user_type'],
            'register_time' => $param['register_time'],
            'user_class' => $param['user_class'],
            'publish' => '0'
        );
        if ($arr['user_type'] == '1')///this is teacher and don't add class field when register user account
            $arr['class'] = '';

        $this->db->insert($this->_table_name, $arr);
        return $this->get_users();
    }

    public function get_single_user($user_id)
    {
        $this->db->select($this->_table_name . '.*');
        $this->db->select("tbl_activation.code, tbl_activation.activate_time");
        $this->db->select("tbl_activation.expire_time");
        $this->db->select('tbl_sites.title as site_name');
        $this->db->from($this->_table_name)
            ->join('tbl_activation', $this->_table_name . '.id = tbl_activation.user_id and tbl_activation.used_status = 1', 'left')
            ->join('tbl_sites', 'tbl_activation.site_id = tbl_sites.id', 'left')
            ->order_by($this->_order_by);
        $this->db->where($this->_table_name . '.id', $user_id);
        $query = $this->db->get();

        return $query->row();
    }

    public function delete($item_id)
    {
        $this->db->where('id', $item_id);
        $this->db->delete($this->_table_name);
    }

    function update_user($data, $id = NULL)///for update session of login time
    {
        $this->db->where('id', $id);
        $this->db->set($data);
        $this->db->update($this->_table_name);
        return $this->get_single_user($id);
    }

    function getUnusedItems()
    {
        return true;
        $this->db->select('*, tbl_user.id as id');
        $this->db->from($this->_table_name);
        $result = $this->db->get()->result();

        foreach ($result as $item) {
            if ($item->user_type == 1 && $item->user_class == '') {
                $user_class = $this->sclass_m->getUserClass($item->id);
                $this->update(array('user_class' => $user_class), $item->id);
            }
            if ($item->user_type == 2 && $item->user_school == '') {
                $user_class = $this->sclass_m->get_where(array('class_name' => $item->user_class))[0];
                $user_school = $this->get_where(array('id' => $user_class->teacher_id))[0];
                $this->edit(array('user_school' => $user_school->user_school), $item->id);
            }
        }
        return true;
    }

    function update_class($className, $classId)///for update session of login time
    {
        $this->db->where('id', $classId);
        $this->db->from('tbl_yekt_class');
        $classItem = $this->db->get()->row();
        $this->db->where('user_class', $classItem->class_name);
        $this->db->set('user_class', $className);
        $this->db->update($this->_table_name);
        return TRUE;
    }

    function update_user_login_num($id)///for update session of login time
    {
        $this->db->set('register_count', 'register_count+1', FALSE);
        $this->db->where('id', $id);
        $this->db->update($this->_table_name);
    }

    function getSchools()
    {
        $this->db->select('user_school');
        $this->db->from($this->_table_name);
        $this->db->group_by('user_school');
        $query = $this->db->get();
        return $query->result();
    }

    function getAreas()
    {
        $this->db->select('user_address');
        $this->db->from($this->_table_name);
        $this->db->group_by('user_address');
        $query = $this->db->get();
        return $query->result();
    }

    public function hash($string)
    {
        return parent::hash($string);
    }

    public function get_where($array = NULL)
    {
        return parent::get_where($array); // TODO: Change the autogenerated stub
    }

}
